// <auto-generated />
using System;
using Kargo_İlan.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kargo_İlan.Migrations
{
    [DbContext(typeof(KargoDbContext))]
    [Migration("20250508074922_adcolumbsystemsettings")]
    partial class adcolumbsystemsettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kargo_İlan.Models.CargoType", b =>
                {
                    b.Property<int>("Cargo_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cargo_id"));

                    b.Property<string>("CargoName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Cargo_id")
                        .HasName("PK_KargoTipleri");

                    b.ToTable("CargoType", (string)null);

                    b.HasData(
                        new
                        {
                            Cargo_id = 10,
                            CargoName = "Palet"
                        },
                        new
                        {
                            Cargo_id = 20,
                            CargoName = "Çuval"
                        },
                        new
                        {
                            Cargo_id = 30,
                            CargoName = "Koli"
                        },
                        new
                        {
                            Cargo_id = 40,
                            CargoName = "Varil"
                        },
                        new
                        {
                            Cargo_id = 50,
                            CargoName = "Bidon"
                        },
                        new
                        {
                            Cargo_id = 60,
                            CargoName = "Sıvı Tankı"
                        },
                        new
                        {
                            Cargo_id = 70,
                            CargoName = "Cam Şişe"
                        },
                        new
                        {
                            Cargo_id = 80,
                            CargoName = "Diğer"
                        });
                });

            modelBuilder.Entity("Kargo_İlan.Models.CategoryType", b =>
                {
                    b.Property<int>("Category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Category_id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Category_id")
                        .HasName("PK_Kategoriler");

                    b.ToTable("CategoryType", (string)null);

                    b.HasData(
                        new
                        {
                            Category_id = 10,
                            CategoryName = "Kırılabilir Ürün"
                        },
                        new
                        {
                            Category_id = 20,
                            CategoryName = "Yanıcı Madde"
                        },
                        new
                        {
                            Category_id = 30,
                            CategoryName = "Soğuk Zincir"
                        },
                        new
                        {
                            Category_id = 40,
                            CategoryName = "Kimyasal Madde"
                        },
                        new
                        {
                            Category_id = 50,
                            CategoryName = "Gıda"
                        },
                        new
                        {
                            Category_id = 70,
                            CategoryName = "Elektronik Eşya"
                        },
                        new
                        {
                            Category_id = 80,
                            CategoryName = "Mobilya"
                        },
                        new
                        {
                            Category_id = 90,
                            CategoryName = "Diğer"
                        });
                });

            modelBuilder.Entity("Kargo_İlan.Models.Company", b =>
                {
                    b.Property<int>("Company_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Company_id"));

                    b.Property<string>("CompanyAdress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CompanyPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Company_id");

                    b.HasIndex("CompanyEmail")
                        .IsUnique()
                        .HasDatabaseName("UK_Company_Email");

                    b.HasIndex("TaxNumber")
                        .IsUnique()
                        .HasDatabaseName("UK_Company_TaxNumber");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("Kargo_İlan.Models.Contact", b =>
                {
                    b.Property<int>("Contact_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Contact_id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Contact_id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Contact_Email");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("Kargo_İlan.Models.District", b =>
                {
                    b.Property<int>("District_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("District_id"));

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("IlceAdi");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("Enlem");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("Boylam");

                    b.Property<int>("Province_id")
                        .HasColumnType("int");

                    b.HasKey("District_id")
                        .HasName("PK_Ilceler");

                    b.HasIndex("Province_id");

                    b.ToTable("Districts", (string)null);
                });

            modelBuilder.Entity("Kargo_İlan.Models.Freight", b =>
                {
                    b.Property<int>("Freight_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Freight_id"));

                    b.Property<int>("Cargo_id")
                        .HasColumnType("int");

                    b.Property<int>("Category_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ListingStatus_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Miktar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<int>("Varisil_id")
                        .HasColumnType("int");

                    b.Property<int>("Varisilce_id")
                        .HasColumnType("int");

                    b.Property<int>("VehicleType_id")
                        .HasColumnType("int");

                    b.Property<int>("Yuklemeil_id")
                        .HasColumnType("int");

                    b.Property<int>("Yuklemeilce_id")
                        .HasColumnType("int");

                    b.HasKey("Freight_id");

                    b.HasIndex("Cargo_id");

                    b.HasIndex("Category_id");

                    b.HasIndex("Freight_id")
                        .IsUnique()
                        .HasDatabaseName("UK_Freight_id");

                    b.HasIndex("ListingStatus_id");

                    b.HasIndex("User_id");

                    b.HasIndex("Varisil_id");

                    b.HasIndex("Varisilce_id");

                    b.HasIndex("VehicleType_id");

                    b.HasIndex("Yuklemeil_id");

                    b.HasIndex("Yuklemeilce_id");

                    b.ToTable("Freight", (string)null);
                });

            modelBuilder.Entity("Kargo_İlan.Models.ListingStatus", b =>
                {
                    b.Property<int>("ListingStatus_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListingStatus_id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ListingStatus_id")
                        .HasName("PK_IlanDurumlari");

                    b.ToTable("ListingStatus", (string)null);

                    b.HasData(
                        new
                        {
                            ListingStatus_id = 10,
                            Status = "Aktif"
                        },
                        new
                        {
                            ListingStatus_id = 20,
                            Status = "Beklemede"
                        },
                        new
                        {
                            ListingStatus_id = 30,
                            Status = "Tamamlandı"
                        },
                        new
                        {
                            ListingStatus_id = 40,
                            Status = "İptal Edildi"
                        });
                });

            modelBuilder.Entity("Kargo_İlan.Models.Notification", b =>
                {
                    b.Property<int>("Notification_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Notification_id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Offer_id")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Notification_id");

                    b.HasIndex("Offer_id");

                    b.HasIndex("User_id");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Kargo_İlan.Models.Offer", b =>
                {
                    b.Property<int>("Offer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Offer_id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Freight_id")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<int>("ValidityInDays")
                        .HasColumnType("int");

                    b.HasKey("Offer_id");

                    b.HasIndex("Freight_id");

                    b.HasIndex("User_id");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("Kargo_İlan.Models.Person", b =>
                {
                    b.Property<int>("Person_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Person_id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Person_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UK_Person_Email");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("UK_Person_PhoneNumber");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("Kargo_İlan.Models.Province", b =>
                {
                    b.Property<int>("Province_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Province_id"));

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("Enlem");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("Boylam");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("IlAdi");

                    b.HasKey("Province_id")
                        .HasName("PK_Iller");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Kargo_İlan.Models.Role", b =>
                {
                    b.Property<int>("Role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Role_id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Role_id");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasDatabaseName("UK_Role_RoleName");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Role_id = 10,
                            RoleName = "User"
                        },
                        new
                        {
                            Role_id = 20,
                            RoleName = "CompanyUser"
                        },
                        new
                        {
                            Role_id = 30,
                            RoleName = "Company"
                        },
                        new
                        {
                            Role_id = 40,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("Kargo_İlan.Models.SystemSetting", b =>
                {
                    b.Property<int>("SystemSetting_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SystemSetting_id"));

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("SystemSetting_id");

                    b.ToTable("SystemSetting", (string)null);
                });

            modelBuilder.Entity("Kargo_İlan.Models.User", b =>
                {
                    b.Property<int>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_id"));

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Person_id")
                        .HasColumnType("int");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("User_id");

                    b.HasIndex("Person_id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("UK_User_UserName");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Kargo_İlan.Models.UserCompany", b =>
                {
                    b.Property<int>("UserCompany_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCompany_id"));

                    b.Property<int>("Company_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("UserCompany_id");

                    b.HasIndex("Company_id");

                    b.HasIndex("User_id", "Company_id")
                        .IsUnique()
                        .HasDatabaseName("UK_UserCompany_User_Company");

                    b.ToTable("UserCompany", (string)null);
                });

            modelBuilder.Entity("Kargo_İlan.Models.UserRole", b =>
                {
                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<int>("Role_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("User_id", "Role_id");

                    b.HasIndex("Role_id");

                    b.HasIndex("User_id", "Role_id")
                        .IsUnique()
                        .HasDatabaseName("UK_UserRole_User_Role");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Kargo_İlan.Models.VehicleType", b =>
                {
                    b.Property<int>("VehicleType_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleType_id"));

                    b.Property<string>("VehicleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VehicleType_id");

                    b.ToTable("VehicleType", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleType_id = 10,
                            VehicleName = "Kamyonet"
                        },
                        new
                        {
                            VehicleType_id = 20,
                            VehicleName = "Tır"
                        },
                        new
                        {
                            VehicleType_id = 30,
                            VehicleName = "Kamyon"
                        },
                        new
                        {
                            VehicleType_id = 40,
                            VehicleName = "Frigo"
                        },
                        new
                        {
                            VehicleType_id = 50,
                            VehicleName = "Panelvan"
                        },
                        new
                        {
                            VehicleType_id = 60,
                            VehicleName = "Minivan"
                        },
                        new
                        {
                            VehicleType_id = 70,
                            VehicleName = "Açık Kasa Tır"
                        },
                        new
                        {
                            VehicleType_id = 80,
                            VehicleName = "Kapalı Kasa Kamyon"
                        },
                        new
                        {
                            VehicleType_id = 90,
                            VehicleName = "Diğer"
                        });
                });

            modelBuilder.Entity("Kargo_İlan.Models.District", b =>
                {
                    b.HasOne("Kargo_İlan.Models.Province", "Province")
                        .WithMany("District")
                        .HasForeignKey("Province_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Ilceler_Iller");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Kargo_İlan.Models.Freight", b =>
                {
                    b.HasOne("Kargo_İlan.Models.CargoType", "Cargo_Type")
                        .WithMany("Freight")
                        .HasForeignKey("Cargo_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Ilanlar_KargoTipi");

                    b.HasOne("Kargo_İlan.Models.CategoryType", "Category_Type")
                        .WithMany("Freight")
                        .HasForeignKey("Category_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Ilanlar_Kategori");

                    b.HasOne("Kargo_İlan.Models.ListingStatus", "Listing_Status")
                        .WithMany("Freight")
                        .HasForeignKey("ListingStatus_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Ilanlar_IlanDurumu");

                    b.HasOne("Kargo_İlan.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kargo_İlan.Models.Province", "Varis_il")
                        .WithMany("Varis_il")
                        .HasForeignKey("Varisil_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Freight_Varis_il");

                    b.HasOne("Kargo_İlan.Models.District", "Varis_ilce")
                        .WithMany("Varis_ilce")
                        .HasForeignKey("Varisilce_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Ilanlar_VarisIlcesi");

                    b.HasOne("Kargo_İlan.Models.VehicleType", "Vehicle_Type")
                        .WithMany("Freight")
                        .HasForeignKey("VehicleType_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kargo_İlan.Models.Province", "Yukleme_il")
                        .WithMany("Yukleme_il")
                        .HasForeignKey("Yuklemeil_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Freight_Yukleme_il");

                    b.HasOne("Kargo_İlan.Models.District", "Yukleme_ilce")
                        .WithMany("Yukleme_ilce")
                        .HasForeignKey("Yuklemeilce_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Ilanlar_YuklemeIlcesi");

                    b.Navigation("Cargo_Type");

                    b.Navigation("Category_Type");

                    b.Navigation("Listing_Status");

                    b.Navigation("User");

                    b.Navigation("Varis_il");

                    b.Navigation("Varis_ilce");

                    b.Navigation("Vehicle_Type");

                    b.Navigation("Yukleme_il");

                    b.Navigation("Yukleme_ilce");
                });

            modelBuilder.Entity("Kargo_İlan.Models.Notification", b =>
                {
                    b.HasOne("Kargo_İlan.Models.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("Offer_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Kargo_İlan.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kargo_İlan.Models.Offer", b =>
                {
                    b.HasOne("Kargo_İlan.Models.Freight", "Freight")
                        .WithMany("Offer")
                        .HasForeignKey("Freight_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kargo_İlan.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kargo_İlan.Models.User", b =>
                {
                    b.HasOne("Kargo_İlan.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Kargo_İlan.Models.UserCompany", b =>
                {
                    b.HasOne("Kargo_İlan.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("Company_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kargo_İlan.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kargo_İlan.Models.UserRole", b =>
                {
                    b.HasOne("Kargo_İlan.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("Role_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kargo_İlan.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kargo_İlan.Models.CargoType", b =>
                {
                    b.Navigation("Freight");
                });

            modelBuilder.Entity("Kargo_İlan.Models.CategoryType", b =>
                {
                    b.Navigation("Freight");
                });

            modelBuilder.Entity("Kargo_İlan.Models.District", b =>
                {
                    b.Navigation("Varis_ilce");

                    b.Navigation("Yukleme_ilce");
                });

            modelBuilder.Entity("Kargo_İlan.Models.Freight", b =>
                {
                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Kargo_İlan.Models.ListingStatus", b =>
                {
                    b.Navigation("Freight");
                });

            modelBuilder.Entity("Kargo_İlan.Models.Province", b =>
                {
                    b.Navigation("District");

                    b.Navigation("Varis_il");

                    b.Navigation("Yukleme_il");
                });

            modelBuilder.Entity("Kargo_İlan.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Kargo_İlan.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Kargo_İlan.Models.VehicleType", b =>
                {
                    b.Navigation("Freight");
                });
#pragma warning restore 612, 618
        }
    }
}
